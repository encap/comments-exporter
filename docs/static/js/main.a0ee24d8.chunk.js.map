{"version":3,"sources":["hooks/useFetchComments.js","components/UserInputs/ExportOptions.js","context/index.js","components/styled/index.js","components/UserInputs/SearchOptions.js","components/UserInputs/UserInputs.js","helpers/exportOne.js","components/Comment/CommentText.js","components/Comment/Comment.js","components/CommentsList/LoadingMsg.js","components/CommentsList/CommentsNotFound.js","components/CommentsList/FetchError.js","hooks/useRefsArray.js","hooks/useFilteredComments.js","helpers/exportZipped.js","hooks/useGenerateScreenshots.js","components/CommentsList/CommentsList.js","App.js","index.js"],"names":["useFetchComments","useState","comments","setComments","isLoading","setIsLoading","isError","setIsError","params","console","log","query","totalLimit","url","process","URLSearchParams","fetch","then","res","a","ok","json","data","warn","status","Error","catch","err","error","ExportOptions","initialState","searchOptions","videoId","searchTerms","verbatimMode","exportOptions","highlight","StateContext","React","createContext","stateReducer","state","type","payload","StateContextProvider","children","useReducer","setState","Provider","value","Button","styled","button","FlexForm","form","SearchOptions","fetchComments","useContext","stateContext","useForm","defaultValues","register","handleSubmit","onSubmit","name","ref","placeholder","htmlFor","id","UserInputs","exportOne","node","fileName","domtoimage","toBlob","pngBlob","saveAs","CommentText","text","searchWords","setSearchWords","useEffect","split","textToHighlight","highlightStyle","background","padding","StyledComment","div","StyledSaveBtn","Comment","comm","index","forwardRef","className","src","img","alt","author","date","likes","replies","onClick","commentNode","current","querySelector","save","StyledP","p","LoadingMsg","CommentsNotFound","FetchError","useRefsArray","array","refsArray","setRefsArray","Array","length","fill","map","createRef","useFilteredComments","filteredComments","setFilteredComments","filter","toLowerCase","includes","exportZipped","options","Promise","all","Uint8Array","arrayBuffer","pngUint8Arr","imgName","files","zipArrayBuffer","encode","Object","fromEntries","zipBlob","Blob","zipName","useGeneratedScreenshots","commentsRefs","isGeneratingScreenshots","setIsGeneratingScreenshots","CommentsList","generateScreenshots","App","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a0ee24d8.chunk.js","sourcesContent":["import { useState } from 'react';\n\nconst useFetchComments = () => {\n  const [comments, setComments] = useState([]);\n  const [isLoading, setIsLoading] = useState(null);\n  const [isError, setIsError] = useState(null);\n\n  const fetchComments = (params) => {\n    setIsLoading(true);\n    console.log(params);\n    const query = {\n      totalLimit: 100,\n      ...params,\n    };\n\n    const url = `${\n      process.env.REACT_APP_API_URL || 'http://localhost:3000'\n    }?${new URLSearchParams(query)}`;\n\n    fetch(url)\n      .then(async (res) => {\n        if (res.ok) {\n          const data = await res.json();\n          console.log('fetched', data);\n\n          setComments(data);\n          setIsLoading(false);\n          setIsError(false);\n        } else {\n          console.warn(res.status);\n          throw Error('Response not ok');\n        }\n      })\n      .catch((err) => {\n        setIsLoading(false);\n        setIsError(true);\n        console.error(err);\n      });\n  };\n\n  return [fetchComments, comments, isLoading, isError];\n};\n\nexport default useFetchComments;\n","const ExportOptions = () => {\n  return (\n    <div>\n      <h3>Export options</h3>\n    </div>\n  );\n};\n\nexport default ExportOptions;\n","import React, { useReducer } from 'react';\n\nconst initialState = {\n  searchOptions: {\n    videoId: 'KgqJJECQQH0',\n    searchTerms: 'nice video',\n    verbatimMode: true,\n  },\n  exportOptions: {\n    highlight: true,\n  },\n};\n\nconst StateContext = React.createContext(initialState);\nconst stateReducer = (state, { type, payload }) => {\n  switch (type) {\n    case 'setSearchOptions':\n      return { ...state, searchOptions: payload };\n    case 'setExportOptions':\n      return { ...state, ExportOptions: payload };\n    default:\n      throw new Error();\n  }\n};\n\nconst StateContextProvider = ({ children }) => {\n  const [state, setState] = useReducer(stateReducer, initialState);\n  return (\n    <StateContext.Provider value={{ state, setState }}>\n      {children}\n    </StateContext.Provider>\n  );\n};\n\nexport default StateContext;\nexport { StateContextProvider };\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  background: red;\n  color: white;\n  border: none;\n  border-radius: 0.5em;\n  padding: 0.2em 3em;\n  outline: none;\n  box-shadow: none;\n  appearance: none;\n  font-size: 1.2rem;\n`;\n\nexport const Test = styled.button`\n  background: red;\n  color: white;\n`;\n","import { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport styled from 'styled-components';\nimport stateContext from '../../context';\nimport { Button } from '../styled';\n\n// searchTerms - string; space separated words;\n// comment must include all terms,\n// but they don't have to be consecutive nor in order\n//\n// verbatimMode - bool; sets client-side filtering\n// matches whole searchTerm case insesitive\n\nconst FlexForm = styled.form`\n  margin: 1em 0;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  width: 10em;\n  height: 10em;\n`;\nconst SearchOptions = ({ fetchComments }) => {\n  const { state, setState } = useContext(stateContext);\n\n  const { register, handleSubmit } = useForm({\n    defaultValues: state.searchOptions,\n  });\n\n  const onSubmit = (data) => {\n    setState({\n      type: 'setSearchOptions',\n      payload: data,\n    });\n    fetchComments(data);\n  };\n  return (\n    <div>\n      <h3>Search options</h3>\n      <FlexForm onSubmit={handleSubmit(onSubmit)}>\n        <input name=\"videoId\" ref={register} placeholder=\"videoID\" />\n        <input name=\"searchTerms\" ref={register} placeholder=\"Search\" />\n        <label htmlFor=\"verbatimMode\">\n          <input\n            name=\"verbatimMode\"\n            id=\"verbatimMode\"\n            type=\"checkbox\"\n            ref={register}\n          />\n          Verbatim Search\n        </label>\n\n        <Button type=\"submit\">Search</Button>\n      </FlexForm>\n    </div>\n  );\n};\n\nSearchOptions.propTypes = {\n  fetchComments: PropTypes.func.isRequired,\n};\n\nexport default SearchOptions;\n","import PropTypes from 'prop-types';\nimport ExportOptions from './ExportOptions';\nimport SearchOptions from './SearchOptions';\n\nconst UserInputs = ({ fetchComments }) => {\n  return (\n    <div>\n      <SearchOptions fetchComments={fetchComments} />\n      <ExportOptions />\n    </div>\n  );\n};\n\nUserInputs.propTypes = {\n  fetchComments: PropTypes.func.isRequired,\n};\n\nexport default UserInputs;\n","import domtoimage from 'dom-to-image';\nimport { saveAs } from 'file-saver';\n\nconst exportOne = async (node, fileName = 'screenshot') => {\n  const pngBlob = await domtoimage.toBlob(node);\n  saveAs(pngBlob, `${fileName}.png`);\n};\n\nexport default exportOne;\n","import { useContext, useEffect, useState } from 'react';\nimport Highlighter from 'react-highlight-words';\nimport StateContext from '../../context';\n\nconst CommentText = ({ children: text }) => {\n  const { searchOptions, exportOptions } = useContext(StateContext).state;\n  const [searchWords, setSearchWords] = useState();\n\n  useEffect(() => {\n    if (exportOptions.highlight) {\n      if (searchOptions.verbatimMode) {\n        // @param: array<string>\n        setSearchWords([searchOptions.searchTerms]);\n      } else {\n        setSearchWords(searchOptions.searchTerms.split(' '));\n      }\n    } else {\n      setSearchWords([]);\n    }\n  }, [\n    searchOptions.searchTerms,\n    searchOptions.verbatimMode,\n    exportOptions.highlight,\n  ]);\n\n  return searchWords ? (\n    <Highlighter\n      textToHighlight={text}\n      highlightStyle={{\n        background: '#ff3',\n        padding: '0 0.2em',\n      }}\n      searchWords={searchWords}\n    />\n  ) : null;\n};\n\nexport default CommentText;\n","import styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport exportOne from '../../helpers/exportOne';\nimport CommentText from './CommentText';\n\nconst StyledComment = styled.div`\n  padding: 0.5em;\n  margin-top: 0.5em;\n  background: #181818;\n  font-size: 15px;\n`;\n\nconst StyledSaveBtn = styled.button`\n  background: none;\n  border: 1px solid white;\n  color: white;\n  padding: 0.1em 2em;\n`;\n\nconst Comment = ({ comm, index, forwardRef }) => {\n  const save = (ref) => {\n    const commentNode = ref.current.querySelector('.comment');\n    exportOne(commentNode, `test-screenshot-${index + 1}`);\n  };\n\n  return (\n    <li ref={forwardRef}>\n      <StyledComment className=\"comment\">\n        <img src={comm.img} alt=\"profile\" />\n        <b> {comm.author}</b>\n        <i> {comm.date}</i>\n        <p>\n          <CommentText>{comm.text}</CommentText>\n        </p>\n        <h3>\n          L: {comm.likes} R: {comm.replies}\n        </h3>\n      </StyledComment>\n      <StyledSaveBtn onClick={() => save(forwardRef)}>Save</StyledSaveBtn>\n    </li>\n  );\n};\n\nComment.propTypes = {\n  comm: PropTypes.shape({\n    img: PropTypes.string.isRequired,\n    author: PropTypes.string.isRequired,\n    date: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired,\n    likes: PropTypes.number.isRequired,\n    replies: PropTypes.number.isRequired,\n  }).isRequired,\n  index: PropTypes.number.isRequired,\n  forwardRef: PropTypes.object.isRequired,\n};\n\nexport default Comment;\n","import styled from 'styled-components';\n\nconst StyledP = styled.p`\n  color: #ccc;\n`;\n\nconst LoadingMsg = () => {\n  return <StyledP>Loading...</StyledP>;\n};\n\nexport default LoadingMsg;\n","import styled from 'styled-components';\n\nconst StyledP = styled.p`\n  color: #00f;\n`;\n\nconst CommentsNotFound = () => {\n  return <StyledP>No comments found</StyledP>;\n};\n\nexport default CommentsNotFound;\n","import styled from 'styled-components';\n\nconst StyledP = styled.p`\n  color: #f00;\n`;\n\nconst FetchError = () => {\n  return (\n    <StyledP>\n      Server is currently unavailable or is unable to search comments for\n      provided ID\n    </StyledP>\n  );\n};\n\nexport default FetchError;\n","import React, { useState, useEffect } from 'react';\n\nconst useRefsArray = (array) => {\n  const [refsArray, setRefsArray] = useState([]);\n\n  useEffect(() => {\n    if (array) {\n      // use .fill(N).map(...) because .fill uses references of the same object\n      setRefsArray(\n        Array(array.length)\n          .fill(0)\n          .map(() => React.createRef()),\n      );\n    }\n  }, [array]);\n\n  return refsArray;\n};\n\nexport default useRefsArray;\n","import { useState, useEffect, useContext } from 'react';\nimport StateContext from '../context';\n\nconst useFilteredComments = (comments) => {\n  const [filteredComments, setFilteredComments] = useState(comments);\n\n  const { searchOptions } = useContext(StateContext).state;\n\n  useEffect(() => {\n    if (searchOptions.verbatimMode && comments.length) {\n      setFilteredComments(\n        comments.filter(({ text }) => {\n          return (\n            text &&\n            text.toLowerCase().includes(searchOptions.searchTerms.toLowerCase())\n          );\n        }),\n      );\n    } else {\n      setFilteredComments(comments);\n    }\n  }, [comments, searchOptions.verbatimMode, searchOptions.searchTerms]);\n\n  return filteredComments;\n};\nexport default useFilteredComments;\n","import domtoimage from 'dom-to-image';\n// eslint-disable-next-line import/no-unresolved\nimport { encode } from 'uzip-module';\nimport { saveAs } from 'file-saver';\n\nconst exportZipped = async (refsArray, options = {}) => {\n  const files = await Promise.all(\n    refsArray.map(async (ref, index) => {\n      const commentNode = ref.current.querySelector('.comment');\n      const pngBlob = await domtoimage.toBlob(commentNode);\n      const pngUint8Arr = new Uint8Array(await pngBlob.arrayBuffer());\n\n      // file entry for UZIP, ['dirname/filename', Uint8Array(data)]\n      return [`${options.imgName || 'comment'}-${index + 1}.png`, pngUint8Arr];\n    }),\n  );\n\n  const zipArrayBuffer = encode(Object.fromEntries(files));\n\n  // UZIP return ArrayBuffer which needs to be convert to blob for file-saver\n  const zipBlob = new Blob([new Uint8Array(zipArrayBuffer)], {\n    type: 'application/zip',\n  });\n\n  saveAs(zipBlob, `${options.zipName || 'screenshots'}.zip`);\n};\n\nexport default exportZipped;\n","import { useEffect, useState, useContext } from 'react';\nimport exportZipped from '../helpers/exportZipped';\nimport StateContext from '../context';\n\nconst useGeneratedScreenshots = (commentsRefs) => {\n  const { searchOptions } = useContext(StateContext).state;\n\n  const [isGeneratingScreenshots, setIsGeneratingScreenshots] = useState(false);\n  const generateScreenshots = () => {\n    setIsGeneratingScreenshots(true);\n    // WARN: Compute intensive function (10ms/comment)\n    // execute in the following useEffect (after render to prevent UI blocking)\n  };\n\n  useEffect(async () => {\n    if (isGeneratingScreenshots) {\n      await exportZipped(commentsRefs, {\n        zipName: `${searchOptions.searchTerms}-${searchOptions.videoId}-screenshots`,\n      });\n      setIsGeneratingScreenshots(false);\n    }\n  }, [isGeneratingScreenshots]);\n\n  return [isGeneratingScreenshots, generateScreenshots];\n};\n\nexport default useGeneratedScreenshots;\n","import PropTypes from 'prop-types';\nimport { or, explicitNull } from 'airbnb-prop-types';\nimport Comment from '../Comment/Comment';\nimport LoadingMsg from './LoadingMsg';\nimport CommentsNotFound from './CommentsNotFound';\nimport FetchError from './FetchError';\nimport { Button } from '../styled';\nimport useRefsArray from '../../hooks/useRefsArray';\nimport useFilteredComments from '../../hooks/useFilteredComments';\nimport useGeneratedScreenshots from '../../hooks/useGenerateScreenshots';\n\nconst CommentsList = ({ comments, isLoading, isError }) => {\n  const filteredComments = useFilteredComments(comments);\n  const commentsRefs = useRefsArray(filteredComments);\n\n  const [\n    isGeneratingScreenshots,\n    generateScreenshots,\n  ] = useGeneratedScreenshots(commentsRefs);\n\n  if (isLoading === true) {\n    return <LoadingMsg />;\n  }\n  if (isLoading === null) {\n    return null;\n  }\n  if (isError) {\n    return <FetchError />;\n  }\n  if (comments.length === 0) {\n    return <CommentsNotFound />;\n  }\n\n  return (\n    <div>\n      <h3>\n        Found {comments.length} comment{comments.length === 1 ? '' : 's'}\n      </h3>\n      <Button type=\"button\" onClick={generateScreenshots}>\n        {isGeneratingScreenshots ? 'Generating...' : 'Save'}\n      </Button>\n      <ol>\n        {filteredComments.map((comm, index) => (\n          <Comment\n            forwardRef={commentsRefs[index]}\n            key={comm.id}\n            comm={comm}\n            index={index}\n          />\n        ))}\n      </ol>\n    </div>\n  );\n};\n\nCommentsList.propTypes = {\n  comments: PropTypes.arrayOf(PropTypes.object).isRequired,\n  isLoading: or([explicitNull(), PropTypes.bool]).isRequired,\n  isError: or([explicitNull(), PropTypes.bool]).isRequired,\n};\n\nexport default CommentsList;\n","import useFetchComments from './hooks/useFetchComments';\nimport UserInputs from './components/UserInputs/UserInputs';\nimport CommentsList from './components/CommentsList/CommentsList';\nimport { StateContextProvider } from './context';\n\nconst App = () => {\n  const [fetchComments, comments, isLoading, isError] = useFetchComments();\n\n  return (\n    <div className=\"App\">\n      <h1>Comments Screenshooter</h1>\n      <StateContextProvider>\n        <UserInputs fetchComments={fetchComments} />\n        <CommentsList\n          comments={comments}\n          isLoading={isLoading}\n          isError={isError}\n        />\n      </StateContextProvider>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './global.sass';\n\nwindow.React = React;\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}